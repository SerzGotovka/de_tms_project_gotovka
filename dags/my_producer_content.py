from confluent_kafka.admin import AdminClient, NewTopic
import json
import random
import time
from datetime import datetime, timezone
from confluent_kafka import Producer
import logging
from generate_data.generate_content import (
    generate_posts, generate_stories, generate_reels, 
    generate_comments, generate_replies, generate_likes, 
    generate_reactions, generate_shares
)
from generate_data.generate_users import gen_user


def my_producer_content(content_type: str, **context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ—Å—Ç—ã, –∏—Å—Ç–æ—Ä–∏–∏, reels –∏ —Ç.–¥.) –≤ Kafka"""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Kafka
        conf = {
            'bootstrap.servers': 'kafka:9092'
        }

        admin = AdminClient(conf)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞
        new_topic = NewTopic(
            topic=f'content_{content_type}',
            num_partitions=3,
            replication_factor=1
        )

        fs = admin.create_topics([new_topic])

        for topic, f in fs.items():
            try:
                f.result()
                print(f"[v] –¢–æ–ø–∏–∫ {topic} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic}: {str(e)}")

        producer = Producer(conf)
        TOPIC = f'content_{content_type}'

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ XCom –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –º–µ–∂–¥—É DAG'–∞–º–∏
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {content_type} –¥–∞–Ω–Ω—ã–µ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if content_type == 'posts':
            data = generate_posts(n=10, **context)
        elif content_type == 'stories':
            data = generate_stories(n=8, **context)
        elif content_type == 'reels':
            data = generate_reels(n=5, **context)
        elif content_type == 'comments':
            data = generate_comments(n=15, **context)
        elif content_type == 'replies':
            data = generate_replies(n=10, **context)
        elif content_type == 'likes':
            data = generate_likes(n=20, **context)
        elif content_type == 'reactions':
            data = generate_reactions(n=15, **context)
        elif content_type == 'shares':
            data = generate_shares(n=10, **context)
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
            return []

        if not data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {content_type}")
            return []
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} {content_type} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Kafka
        for item in data:
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON
                json_data = json.dumps(item, ensure_ascii=False, default=str)
                producer.produce(TOPIC, json_data.encode('utf-8'))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {item.get('id', 'unknown')}: {e}")
                continue
                
        producer.flush()
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(data)} {content_type} –≤ —Ç–æ–ø–∏–∫ {TOPIC}")
        return data
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ my_producer_content: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_producer_content –¥–ª—è {content_type}: {e}")
        raise
    finally:
        try:
            producer.close()
        except:
            pass


def my_producer_posts(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ Kafka"""
    return my_producer_content('posts', **context)


def my_producer_stories(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–π –≤ Kafka"""
    return my_producer_content('stories', **context)


def my_producer_reels(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reels –≤ Kafka"""
    return my_producer_content('reels', **context)


def my_producer_comments(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Kafka"""
    return my_producer_content('comments', **context)


def my_producer_replies(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ Kafka"""
    return my_producer_content('replies', **context)


def my_producer_likes(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–æ–≤ –≤ Kafka"""
    return my_producer_content('likes', **context)


def my_producer_reactions(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –≤ Kafka"""
    return my_producer_content('reactions', **context)


def my_producer_shares(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç–æ–≤ –≤ Kafka"""
    return my_producer_content('shares', **context)
