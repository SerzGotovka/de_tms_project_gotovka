from confluent_kafka.admin import AdminClient, NewTopic
import json
import random
import time
from datetime import datetime, timezone
from confluent_kafka import Producer
import logging


def my_producer_media(media_type: str, **context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –≤ Kafka"""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Kafka
        conf = {
            'bootstrap.servers': 'kafka:9092'
        }

        admin = AdminClient(conf)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞
        new_topic = NewTopic(
            topic=f'media_{media_type}',
            num_partitions=3,
            replication_factor=1
        )

        fs = admin.create_topics([new_topic])

        for topic, f in fs.items():
            try:
                f.result()
                print(f"[v] –¢–æ–ø–∏–∫ {topic} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic}: {str(e)}")

        producer = Producer(conf)
        TOPIC = f'media_{media_type}'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XCom
        print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º {media_type} –¥–∞–Ω–Ω—ã–µ –∏–∑ XCom...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom
        users = context['task_instance'].xcom_pull(key='users', task_ids='generate_data_group.gen_users')
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom")
        
        if media_type == 'photos':
            data = context['task_instance'].xcom_pull(key='photos', task_ids='generate_data_group.gen_photos')
        elif media_type == 'videos':
            data = context['task_instance'].xcom_pull(key='videos', task_ids='generate_data_group.gen_videos')
        elif media_type == 'albums':
            # –î–ª—è –∞–ª—å–±–æ–º–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –∞–ª—å–±–æ–º—ã –∏–∑ XCom
            photos = context['task_instance'].xcom_pull(key='photos', task_ids='generate_data_group.gen_photos')
            videos = context['task_instance'].xcom_pull(key='videos', task_ids='generate_data_group.gen_videos')
            data = context['task_instance'].xcom_pull(key='albums', task_ids='generate_data_group.gen_albums')
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
            return []

        if not data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {media_type}")
            return []
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} {media_type} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Kafka
        for item in data:
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON
                json_data = json.dumps(item, ensure_ascii=False, default=str)
                producer.produce(TOPIC, json_data.encode('utf-8'))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {item.get('id', 'unknown')}: {e}")
                continue
                
        producer.flush()
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(data)} {media_type} –≤ —Ç–æ–ø–∏–∫ {TOPIC}")
        return data
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ my_producer_media: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_producer_media –¥–ª—è {media_type}: {e}")
        raise
    finally:
        try:
            producer.close()
        except:
            pass


def my_producer_albums(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –≤ Kafka"""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Kafka
        conf = {
            'bootstrap.servers': 'kafka:9092'
        }

        admin = AdminClient(conf)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
        new_topic = NewTopic(
            topic='media_albums',
            num_partitions=3,
            replication_factor=1
        )

        fs = admin.create_topics([new_topic])

        for topic, f in fs.items():
            try:
                f.result()
                print(f"[v] –¢–æ–ø–∏–∫ {topic} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic}: {str(e)}")

        producer = Producer(conf)
        TOPIC = 'media_albums'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XCom
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–æ–≤ –∏–∑ XCom...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom
        users = context['task_instance'].xcom_pull(key='users', task_ids='generate_data_group.gen_users')
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –∞–ª—å–±–æ–º—ã –∏–∑ XCom
        photos = context['task_instance'].xcom_pull(key='photos', task_ids='generate_data_group.gen_photos')
        videos = context['task_instance'].xcom_pull(key='videos', task_ids='generate_data_group.gen_videos')
        data = context['task_instance'].xcom_pull(key='albums', task_ids='generate_data_group.gen_albums')

        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤")
            return []
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Kafka
        for item in data:
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON
                json_data = json.dumps(item, ensure_ascii=False, default=str)
                producer.produce(TOPIC, json_data.encode('utf-8'))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞ {item.get('id', 'unknown')}: {e}")
                continue
                
        producer.flush()
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(data)} –∞–ª—å–±–æ–º–æ–≤ –≤ —Ç–æ–ø–∏–∫ {TOPIC}")
        return data
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ my_producer_albums: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_producer_albums: {e}")
        raise
    finally:
        try:
            producer.close()
        except:
            pass
