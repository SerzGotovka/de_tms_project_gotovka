import json
import logging
from confluent_kafka import Producer
from typing import List, Dict, Any
from datetime import datetime, date
from generate_data.generate_media import generate_photos, generate_videos, generate_albums
from generate_data.generate_content import (
    generate_posts, generate_stories, generate_reels,
    generate_comments, generate_replies, generate_likes,
    generate_reactions, generate_shares
)
from utils.tg_bot import send_telegram_message


class DateTimeEncoder(json.JSONEncoder):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSON encoder –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime –∏ date –æ–±—ä–µ–∫—Ç–æ–≤"""
    def default(self, obj):
        if isinstance(obj, (datetime, date)):
            return obj.isoformat()
        return super().default(obj)


class KafkaDataProducer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka —Ç–æ–ø–∏–∫–∏"""
    
    def __init__(self, bootstrap_servers: str = "kafka:9092"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Producer"""
        self.conf = {
            'bootstrap.servers': bootstrap_servers,
            'client.id': 'social_media_producer',
            'acks': 'all',  # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö —Ä–µ–ø–ª–∏–∫
            'retries': 3   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            
        }
        
        try:
            self.producer = Producer(self.conf)
            logging.info(f"Kafka Producer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {bootstrap_servers}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Producer: {str(e)}")
            raise
    
    def delivery_report(self, err, msg):
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if err is not None:
            logging.error(f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}')
            if hasattr(err, 'code'):
                logging.error(f'–ö–æ–¥ –æ—à–∏–±–∫–∏: {err.code()}')
        else:
            logging.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {msg.topic()} [—Ä–∞–∑–¥–µ–ª {msg.partition()}] –Ω–∞ —Å–º–µ—â–µ–Ω–∏–µ {msg.offset()}')
            logging.info(f'–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {len(msg.value())} –±–∞–π—Ç')
    
    def send_message(self, topic: str, data: Dict[str, Any], key: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka —Ç–æ–ø–∏–∫"""
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π datetime/date
            message = json.dumps(data, ensure_ascii=False, cls=DateTimeEncoder)
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ {topic}: {message[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.producer.produce(
                topic=topic,
                key=key.encode('utf-8') if key else None,
                value=message.encode('utf-8'),
                callback=self.delivery_report
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.producer.poll(0)
            
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ {topic}: {str(e)}")
            raise
    
    def send_media_data(self, users: List[Dict[str, Any]], context: Dict[str, Any] = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–ø–∏–∫–∏"""
        
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        photos = generate_photos(num_photos=10, **context)
        for photo in photos:
            self.send_message(
                topic='photos',
                data=photo,
                key=photo.get('id', photo.get('user_id'))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        videos = generate_videos(num_videos=5, **context)
        for video in videos:
            self.send_message(
                topic='videos',
                data=video,
                key=video.get('id', video.get('user_id'))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–æ–≤
        albums = generate_albums(num_albums=3, **context)
        for album in albums:
            self.send_message(
                topic='albums',
                data=album,
                key=album.get('id', album.get('user_id'))
            )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.producer.flush(timeout=30)  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        total_files = len(photos) + len(videos) + len(albums)
        message = f"üì∏ –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kafka:\n"
        message += f"‚Ä¢ –§–æ—Ç–æ: {len(photos)}\n"
        message += f"‚Ä¢ –í–∏–¥–µ–æ: {len(videos)}\n"
        message += f"‚Ä¢ –ê–ª—å–±–æ–º—ã: {len(albums)}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
        
        try:
            if send_telegram_message(message):
                logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        return {
            'photos': photos,
            'videos': videos,
            'albums': albums
        }
    
    def send_content_data(self, users: List[Dict[str, Any]], context: Dict[str, Any] = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–ø–∏–∫–∏"""
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Kafka")
        
        user_ids = [user['id'] for user in users]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤
        posts = generate_posts(n=10, **context)
        for post in posts:
            self.send_message(
                topic='posts',
                data=post,
                key=str(post.get('id', post.get('author_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
        stories = generate_stories(n=5, **context)
        for story in stories:
            self.send_message(
                topic='stories',
                data=story,
                key=str(story.get('id', story.get('user_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Reels
        reels = generate_reels(n=5, **context)
        for reel in reels:
            self.send_message(
                topic='reels',
                data=reel,
                key=str(reel.get('id', reel.get('user_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments = generate_comments(n=15, **context)
        for comment in comments:
            self.send_message(
                topic='comments',
                data=comment,
                key=str(comment.get('id', comment.get('post_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        replies = generate_replies(n=10, **context)
        for reply in replies:
            self.send_message(
                topic='replies',
                data=reply,
                key=str(reply.get('id', reply.get('comment_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∞–π–∫–æ–≤
        likes = generate_likes(n=20, **context)
        for like in likes:
            self.send_message(
                topic='likes',
                data=like,
                key=str(like.get('id', like.get('post_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
        reactions = generate_reactions(n=15, **context)
        for reaction in reactions:
            self.send_message(
                topic='reactions',
                data=reaction,
                key=str(reaction.get('id', reaction.get('post_id')))
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤
        shares = generate_shares(n=8, **context)
        for share in shares:
            self.send_message(
                topic='shares',
                data=share,
                key=str(share.get('id', share.get('post_id')))
            )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.producer.flush(timeout=30)  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        total_files = len(posts) + len(stories) + len(reels) + len(comments) + len(replies) + len(likes) + len(reactions) + len(shares)
        message = f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kafka:\n"
        message += f"‚Ä¢ –ü–æ—Å—Ç—ã: {len(posts)}\n"
        message += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏: {len(stories)}\n"
        message += f"‚Ä¢ Reels: {len(reels)}\n"
        message += f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(comments)}\n"
        message += f"‚Ä¢ –û—Ç–≤–µ—Ç—ã: {len(replies)}\n"
        message += f"‚Ä¢ –õ–∞–π–∫–∏: {len(likes)}\n"
        message += f"‚Ä¢ –†–µ–∞–∫—Ü–∏–∏: {len(reactions)}\n"
        message += f"‚Ä¢ –†–µ–ø–æ—Å—Ç—ã: {len(shares)}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
        
        try:
            if send_telegram_message(message):
                logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        return {
            'posts': posts,
            'stories': stories,
            'reels': reels,
            'comments': comments,
            'replies': replies,
            'likes': likes,
            'reactions': reactions,
            'shares': shares
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Kafka"""
        try:
            self.producer.flush(timeout=10)
            logging.info("Kafka Producer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")


def send_media_to_kafka(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom
        users = context["task_instance"].xcom_pull(key="users", task_ids="gen_users")
        if users is None:
            users = context["task_instance"].xcom_pull(key="users", task_ids="generate_data_group.gen_users")
        
        if users is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom")
        
        # –°–æ–∑–¥–∞–µ–º producer –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        producer = KafkaDataProducer()
        media_data = producer.send_media_data(users, context)
        producer.close()
        
        logging.info(f"–ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka: {len(media_data['photos'])} —Ñ–æ—Ç–æ, {len(media_data['videos'])} –≤–∏–¥–µ–æ, {len(media_data['albums'])} –∞–ª—å–±–æ–º–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        total_files = len(media_data['photos']) + len(media_data['videos']) + len(media_data['albums'])
        message = f"üì∏ –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kafka (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞):\n"
        message += f"‚Ä¢ –§–æ—Ç–æ: {len(media_data['photos'])}\n"
        message += f"‚Ä¢ –í–∏–¥–µ–æ: {len(media_data['videos'])}\n"
        message += f"‚Ä¢ –ê–ª—å–±–æ–º—ã: {len(media_data['albums'])}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
        
        try:
            if send_telegram_message(message):
                logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞) –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        return media_data
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka: {str(e)}")
        raise


def send_content_to_kafka(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Kafka"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom
        users = context["task_instance"].xcom_pull(key="users", task_ids="gen_users")
        if users is None:
            users = context["task_instance"].xcom_pull(key="users", task_ids="generate_data_group.gen_users")
        
        if users is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom")
        
        # –°–æ–∑–¥–∞–µ–º producer –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        producer = KafkaDataProducer()
        content_data = producer.send_content_data(users, context)
        producer.close()
        
        logging.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka: {len(content_data['posts'])} –ø–æ—Å—Ç–æ–≤, {len(content_data['stories'])} –∏—Å—Ç–æ—Ä–∏–π, {len(content_data['reels'])} reels")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        total_files = len(content_data['posts']) + len(content_data['stories']) + len(content_data['reels']) + len(content_data['comments']) + len(content_data['replies']) + len(content_data['likes']) + len(content_data['reactions']) + len(content_data['shares'])
        message = f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kafka (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞):\n"
        message += f"‚Ä¢ –ü–æ—Å—Ç—ã: {len(content_data['posts'])}\n"
        message += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏: {len(content_data['stories'])}\n"
        message += f"‚Ä¢ Reels: {len(content_data['reels'])}\n"
        message += f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(content_data['comments'])}\n"
        message += f"‚Ä¢ –û—Ç–≤–µ—Ç—ã: {len(content_data['replies'])}\n"
        message += f"‚Ä¢ –õ–∞–π–∫–∏: {len(content_data['likes'])}\n"
        message += f"‚Ä¢ –†–µ–∞–∫—Ü–∏–∏: {len(content_data['reactions'])}\n"
        message += f"‚Ä¢ –†–µ–ø–æ—Å—Ç—ã: {len(content_data['shares'])}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
        
        try:
            if send_telegram_message(message):
                logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞) –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        return content_data
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Kafka: {str(e)}")
        raise


def send_all_to_kafka(**context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Kafka"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom
        users = context["task_instance"].xcom_pull(key="users", task_ids="gen_users")
        if users is None:
            users = context["task_instance"].xcom_pull(key="users", task_ids="generate_data_group.gen_users")
        
        if users is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ XCom")
        
        # –°–æ–∑–¥–∞–µ–º producer –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        producer = KafkaDataProducer()
        media_data = producer.send_media_data(users, context)
        content_data = producer.send_content_data(users, context)
        producer.close()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        total_media_files = len(media_data['photos']) + len(media_data['videos']) + len(media_data['albums'])
        total_content_files = len(content_data['posts']) + len(content_data['stories']) + len(content_data['reels']) + len(content_data['comments']) + len(content_data['replies']) + len(content_data['likes']) + len(content_data['reactions']) + len(content_data['shares'])
        total_files = total_media_files + total_content_files
        
        message = f"üöÄ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kafka:\n"
        message += f"üì∏ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã: {total_media_files}\n"
        message += f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª—ã: {total_content_files}\n"
        message += f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
        
        try:
            if send_telegram_message(message):
                logging.info("–û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        logging.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka")
        return {
            'media_data': media_data,
            'content_data': content_data
        }
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka: {str(e)}")
        raise


